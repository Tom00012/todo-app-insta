{"version":3,"sources":["serviceWorker.js","components/Header.js","components/InputTodo.js","components/TodoItem.js","components/TodoList.js","components/TodoContainer.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","render","className","Component","InputTodo","props","handleChange","event","setState","target","name","value","handleSubmit","addTodoProps","state","title","preventDefault","onSubmit","type","onChange","placeholder","bind","React","TodoItem","Fragment","key","checked","todo","completed","handleChangeProps","id","onClick","deleteTodoProps","TodoList","todos","map","TodoContainer","uuidv4","delTodo","filter","addTodoItem","newTodo","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCLSC,E,4MAVdC,OAAS,WACR,OACC,4BAAQC,UAAU,UAChB,8DACA,kE,YALgBC,a,cCgCNC,E,kDA/Bd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAMPC,aAAe,SAACC,GACf,EAAKC,SAAL,eAAgBD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,SAR/B,EAUnBC,aAAe,SAACL,GACf,EAAKF,MAAMQ,aAAa,EAAKC,MAAMC,OACnC,EAAKP,SAAS,CAAEO,MAAO,KACvBR,EAAMS,kBAbY,EAenBf,OAAS,WACR,OACC,0BAAMC,UAAU,cAAce,SAAU,EAAKL,cAC5C,yBAAKV,UAAU,YACd,yBAAKA,UAAU,uBACd,2BAAOA,UAAU,eAAeQ,KAAK,QAAQQ,KAAK,OAAOP,MAAO,EAAKG,MAAMC,MAAOI,SAAU,EAAKb,aAAcc,YAAY,0BAE5H,yBAAKlB,UAAU,uBACd,4BAAQA,UAAU,uBAAuBgB,KAAK,UAA9C,eArBJ,EAAKJ,MAAQ,CAACC,MAAO,IAErB,EAAKT,aAAe,EAAKA,aAAae,KAAlB,gBACpB,EAAKT,aAAe,EAAKA,aAAaS,KAAlB,gBALF,E,UADIC,IAAMnB,WCiBfoB,E,4MAhBdtB,OAAS,WAER,OACC,kBAAC,IAAMuB,SAAP,KACC,wBAAItB,UAAU,kBAAkBuB,IAAK,EAAKA,KACzC,2BAAOvB,UAAU,mBAAmBgB,KAAK,WAAWQ,QAAS,EAAKrB,MAAMsB,KAAKC,UAAWT,SAAU,kBAAM,EAAKd,MAAMwB,kBAAkB,EAAKxB,MAAMsB,KAAKG,OACpJ,EAAKzB,MAAMsB,KAAKZ,MACjB,yBAAKb,UAAU,cACd,4BAAQ6B,QAAS,kBAAM,EAAK1B,MAAM2B,gBAAgB,EAAK3B,MAAMsB,KAAKG,KAAK5B,UAAU,mBAAjF,iB,YATiBoB,IAAMnB,WCYd8B,E,4MATdhC,OAAS,WACR,OACC,kBAAC,IAAMuB,SAAP,KACE,EAAKnB,MAAM6B,MAAMC,KAAI,SAAAR,GAAI,OAAI,kBAAC,EAAD,CAAUF,IAAKE,EAAKG,GAAIH,KAAMA,EAAME,kBAAmB,EAAKxB,MAAMwB,kBAAmBG,gBAAiB,EAAK3B,MAAM2B,uB,YAJ5HV,IAAMnB,W,QC6DdiC,E,4MAzDdtB,MAAQ,CACPoB,MAAO,CACN,CACCJ,GAAIO,cACJtB,MAAO,qDACPa,WAAW,GAEZ,CACCE,GAAIO,cACJtB,MAAO,sDACPa,WAAW,GAEZ,CACCE,GAAIO,cACJtB,MAAO,gDACPa,WAAW,K,EAKdtB,aAAe,SAACwB,GACf,EAAKtB,SAAS,CAAC0B,MAAO,EAAKpB,MAAMoB,MAAMC,KAAI,SAAAR,GAI1C,OAHIA,EAAKG,KAAOA,IACfH,EAAKC,WAAaD,EAAKC,WAEjBD,Q,EAITW,QAAU,SAACR,GACV,EAAKtB,SAAS,CAAE0B,MAAM,YAAM,EAAKpB,MAAMoB,MAAMK,QAAO,SAAAZ,GACnD,OAAOA,EAAKG,KAAOA,S,EAIrBU,YAAc,SAACzB,GACd,IAAM0B,EAAU,CAAEX,GAAIO,cAAUtB,MAAOA,EAAOa,WAAW,GACzD,EAAKpB,SAAS,CAAE0B,MAAM,GAAD,mBAAM,EAAKpB,MAAMoB,OAAjB,CAAwBO,O,EAG9CxC,OAAS,WACR,OACC,kBAAC,IAAMuB,SAAP,KACC,kBAAC,EAAD,MACA,yBAAKtB,UAAU,UACf,yBAAKA,UAAU,aACd,kBAAC,EAAD,CAAWW,aAAc,EAAK2B,cAC9B,yBAAKtC,UAAU,UACf,wBAAIA,UAAU,cACb,kBAAC,EAAD,CAAUgC,MAAO,EAAKpB,MAAMoB,MAAOL,kBAAmB,EAAKvB,aAAc0B,gBAAiB,EAAKM,c,YAlDzEhB,IAAMnB,WCClCuC,IAASzC,OAAO,kBAAC,EAAD,MAAmB0C,SAASC,eAAe,SN2HrD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9daae362.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\r\n\r\nclass Header extends Component {\r\n\trender = () => {\r\n\t\treturn (\r\n\t\t\t<header className=\"header\">\r\n\t\t\t\t <h1>Bonjour de l'application React</h1>\r\n\t\t\t\t <p>Je suis dans un composant React !</p>\r\n\t\t\t</header>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Header","import React from \"react\";\r\n\r\nclass InputTodo extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {title: ''};\r\n\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\r\n\t}\r\n\thandleChange = (event) => {\r\n\t\tthis.setState({[event.target.name]: event.target.value });\r\n\t}\r\n\thandleSubmit = (event) => {\r\n\t\tthis.props.addTodoProps(this.state.title);\r\n\t\tthis.setState({ title: \"\" });\r\n\t\tevent.preventDefault();\r\n\t}\r\n\trender = () => {\r\n\t\treturn (\r\n\t\t\t<form className=\"form-inline\" onSubmit={this.handleSubmit}>\r\n\t\t\t\t<div className=\"form-row\">\r\n\t\t\t\t\t<div className=\"form-group col-auto\">\r\n\t\t\t\t\t\t<input className=\"form-control\" name=\"title\" type=\"text\" value={this.state.title} onChange={this.handleChange} placeholder=\"Element Ã  ajouter\"/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"form-group col-auto\">\r\n\t\t\t\t\t\t<button className=\"btn btn-primary mb-2\" type=\"submit\">Ajouter</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default InputTodo","import React from \"react\"\r\n\r\nclass TodoItem extends React.Component {\r\n\trender = () => {\r\n\t\t//console.log(this.props);\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<li className=\"list-group-item\" key={this.key}>\r\n\t\t\t\t\t<input className=\"form-check-input\" type=\"checkbox\" checked={this.props.todo.completed} onChange={() => this.props.handleChangeProps(this.props.todo.id)} />\r\n\t\t\t\t\t{this.props.todo.title}\r\n\t\t\t\t\t<div className=\"text-right\">\r\n\t\t\t\t\t\t<button onClick={() => this.props.deleteTodoProps(this.props.todo.id)} className=\"btn btn-primary\">Supprimer</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</li>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default TodoItem\r\n","import React from \"react\";\r\n// component file\r\nimport TodoItem from './TodoItem';\r\n\r\nclass TodoList extends React.Component {\r\n\trender = () => {\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t{this.props.todos.map(todo => <TodoItem key={todo.id} todo={todo} handleChangeProps={this.props.handleChangeProps} deleteTodoProps={this.props.deleteTodoProps} />)}\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default TodoList","import React from \"react\";\r\n// component file\r\nimport Header from './Header';\r\nimport InputTodo from './InputTodo';\r\nimport TodoList from './TodoList';\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nclass TodoContainer extends React.Component {\r\n\tstate = {\r\n\t\ttodos: [\r\n\t\t\t{\r\n\t\t\t\tid: uuidv4(),\r\n\t\t\t\ttitle: \"Mettre en place l'environement de dÃ©veloppement\",\r\n\t\t\t\tcompleted: true\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: uuidv4(),\r\n\t\t\t\ttitle: \"DÃ©velopper le site web et ajouter les composants\",\r\n\t\t\t\tcompleted: false\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: uuidv4(),\r\n\t\t\t\ttitle: \"Deployer le site sur le serveur de production\",\r\n\t\t\t\tcompleted: false\r\n\t\t\t}\r\n\t\t]\r\n\t};\r\n\r\n\thandleChange = (id) => {\r\n\t\tthis.setState({todos: this.state.todos.map(todo => {\r\n\t\t\tif (todo.id === id) {\r\n\t\t\t\ttodo.completed = !todo.completed;\r\n\t\t\t}\r\n\t\t\treturn todo;\r\n\t\t})});\r\n\t};\r\n\r\n\tdelTodo = (id) => {\r\n\t\tthis.setState({ todos: [ ...this.state.todos.filter(todo => {\r\n\t\t\treturn todo.id !== id;\r\n\t\t})]});\r\n\t};\r\n\r\n\taddTodoItem = (title) => {\r\n\t\tconst newTodo = { id: uuidv4(), title: title, completed: false};\r\n\t\tthis.setState({ todos: [...this.state.todos, newTodo]});\r\n\t};\r\n\r\n\trender = () => {\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<Header />\r\n\t\t\t\t<div className=\"clear\"></div>\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<InputTodo addTodoProps={this.addTodoItem} />\r\n\t\t\t\t\t<div className=\"clear\"></div>\r\n\t\t\t\t\t<ul className=\"list-group\">\r\n\t\t\t\t\t\t<TodoList todos={this.state.todos} handleChangeProps={this.handleChange} deleteTodoProps={this.delTodo} />\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default TodoContainer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n// component file\nimport TodoContainer from './components/TodoContainer';\n\n\nReactDOM.render(<TodoContainer />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}